import asyncio
import logging
from urllib.parse import urlparse

from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.utils.formatting import (
    Text, Bold, Italic, TextLink, Code
)
from dotenv import load_dotenv

from config import TELEGRAM_BOT_TOKEN, LOG_LEVEL, DEFAULT_SITE
from rag_core import RAGCore

load_dotenv()
logging.basicConfig(level=getattr(logging, LOG_LEVEL.upper()), format='%(asctime)s - %(levelname)s - %(message)s')


if not TELEGRAM_BOT_TOKEN:
    raise SystemExit("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")


bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher()



HELP_TEXT = Text(
    Bold("–ö–æ–º–∞–Ω–¥—ã:\n"),
    Code("/start"), " ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n",
    Code("/help"), " ‚Äî —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n",
    Code("/update <url> [max]"), " ‚Äî –æ–±–Ω–æ–≤–∏—Ç—å –±–∞–∑—É –∑–Ω–∞–Ω–∏–π\n",
    Code("/stats"), " ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã\n",
    Code("/ping"), " ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏\n\n",
    "–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å—Ç–æ—á–Ω–∏–∫: ", Italic(DEFAULT_SITE), "\n",
    "–ü—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–æ–º ‚Äî —è –Ω–∞–π–¥—É –æ—Ç–≤–µ—Ç –≤ –±–∞–∑–µ\."
)


@dp.message(CommandStart())
async def send_welcome(message: types.Message):
    await message.answer(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π.\n\n"
        "–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å ‚Äî –Ω–∞–π–¥—É –æ—Ç–≤–µ—Ç –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π (delprof.ru –∏ –¥—Ä.) –∏ –≤–µ—Ä–Ω—É —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–æ —Å—Å—ã–ª–∫–∞–º–∏.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã: /help"
    )


@dp.message(Command("help"))
async def help_handler(message: types.Message):
    await message.answer(
        HELP_TEXT.as_markdown(),
        parse_mode=ParseMode.MARKDOWN_V2,
        disable_web_page_preview=True
    )


@dp.message(Command("ping"))
async def ping_handler(message: types.Message, rag_system: RAGCore):
    ok = rag_system is not None
    await message.answer("‚úÖ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ." if ok else "‚ùå –°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")


@dp.message(Command("stats"))
async def stats_handler(message: types.Message, rag_system: RAGCore):
    if not rag_system:
        await message.answer("‚ùå –°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        return
    stats = rag_system.get_stats()
    content = Text(
        Bold("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã:\n"),
        "‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç–æ–≤: ", Code(stats['documents']), "\n",
        "‚Ä¢ –ß–∞–Ω–∫–æ–≤: ", Code(stats['chunks']), "\n",
        "‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ", Italic(stats['last_updated'])
    )

    await message.answer(content.as_markdown(), parse_mode=ParseMode.MARKDOWN_V2)


@dp.message(Command("update"))
async def update_command_handler(message: types.Message, rag_system: RAGCore):
    if not rag_system:
        await message.answer("–°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ.")
        return

    command_args = message.text.split(maxsplit=2)
    url = None
    max_links = None

    if len(command_args) >= 2:
        url = command_args[1].strip()
    if len(command_args) == 3 and command_args[2].strip().isdigit():
        max_links = int(command_args[2].strip())

    if not url:
        url = DEFAULT_SITE

    parsed_url = urlparse(url)
    if not (parsed_url.scheme and parsed_url.netloc):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π URL. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å http:// –∏–ª–∏ https://")
        return

    thinking_message = await message.answer(
        f"–ù–∞—á–∏–Ω–∞—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π —Å —Å–∞–π—Ç–∞ {url}... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç. üöÄ"
    )
    try:
        status = await asyncio.to_thread(rag_system.update_knowledge_base, url, max_links=max_links)
        await thinking_message.edit_text(status)
    except ValueError as e:
        logging.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: %s", e)
        await thinking_message.edit_text(f"–û—à–∏–±–∫–∞: {e}")
    except Exception as e:
        logging.exception("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
        await thinking_message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@dp.message(F.text)
async def handle_query(message: types.Message, rag_system: RAGCore):
    if not rag_system:
        await message.answer("–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    user_query = message.text.strip()
    thinking_message = await message.answer("–î—É–º–∞—é... üß†")

    try:
        messages, sources = await asyncio.to_thread(rag_system.get_answer, user_query)
        '''if sources:
            src_lines = "\n".join([f"‚Ä¢ [{s['title']}]({s['url']})" for s in sources])
            messages[-1] += f"\n\n*–ò—Å—Ç–æ—á–Ω–∏–∫–∏:*\n{src_lines}"'''
        answer = Text(
            messages[0]
        )
        await thinking_message.edit_text(answer.as_markdown(), disable_web_page_preview=True, parse_mode=ParseMode.MARKDOWN_V2)

        for msg in messages[1:]:
            answer = Text(
                msg
            )
            await message.answer(answer.as_markdown(), disable_web_page_preview=True, parse_mode=ParseMode.MARKDOWN_V2)
    except Exception:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
        await thinking_message.edit_text("–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")


async def main():
    logging.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RAG-—Å–∏—Å—Ç–µ–º—ã...")
    try:
        rag_system = await RAGCore.create()
        logging.info("RAG-—Å–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
    except Exception as e:
        logging.exception("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ RAG-—Å–∏—Å—Ç–µ–º—ã")
        rag_system = None

    dp["rag_system"] = rag_system

    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
